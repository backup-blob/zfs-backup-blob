// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/config/config.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/config/config.go -destination=internal/domain/config/mocks/config.go -package mocks_config
//

// Package mocks_config is a generated GoMock package.
package mocks_config

import (
	reflect "reflect"

	domain "github.com/backup-blob/zfs-backup-blob/internal/domain"
	config "github.com/backup-blob/zfs-backup-blob/internal/domain/config"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigDriver is a mock of ConfigDriver interface.
type MockConfigDriver struct {
	ctrl     *gomock.Controller
	recorder *MockConfigDriverMockRecorder
}

// MockConfigDriverMockRecorder is the mock recorder for MockConfigDriver.
type MockConfigDriverMockRecorder struct {
	mock *MockConfigDriver
}

// NewMockConfigDriver creates a new mock instance.
func NewMockConfigDriver(ctrl *gomock.Controller) *MockConfigDriver {
	mock := &MockConfigDriver{ctrl: ctrl}
	mock.recorder = &MockConfigDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigDriver) EXPECT() *MockConfigDriverMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigDriver) GetConfig() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigDriverMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigDriver)(nil).GetConfig))
}

// GetMiddlewares mocks base method.
func (m *MockConfigDriver) GetMiddlewares() []domain.Middleware {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMiddlewares")
	ret0, _ := ret[0].([]domain.Middleware)
	return ret0
}

// GetMiddlewares indicates an expected call of GetMiddlewares.
func (mr *MockConfigDriverMockRecorder) GetMiddlewares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMiddlewares", reflect.TypeOf((*MockConfigDriver)(nil).GetMiddlewares))
}

// GetStorageDriver mocks base method.
func (m *MockConfigDriver) GetStorageDriver() domain.StorageDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageDriver")
	ret0, _ := ret[0].(domain.StorageDriver)
	return ret0
}

// GetStorageDriver indicates an expected call of GetStorageDriver.
func (mr *MockConfigDriverMockRecorder) GetStorageDriver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageDriver", reflect.TypeOf((*MockConfigDriver)(nil).GetStorageDriver))
}

// GetZfsDriver mocks base method.
func (m *MockConfigDriver) GetZfsDriver() domain.ZfsDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZfsDriver")
	ret0, _ := ret[0].(domain.ZfsDriver)
	return ret0
}

// GetZfsDriver indicates an expected call of GetZfsDriver.
func (mr *MockConfigDriverMockRecorder) GetZfsDriver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZfsDriver", reflect.TypeOf((*MockConfigDriver)(nil).GetZfsDriver))
}

// MockConfigRepo is a mock of ConfigRepo interface.
type MockConfigRepo struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepoMockRecorder
}

// MockConfigRepoMockRecorder is the mock recorder for MockConfigRepo.
type MockConfigRepoMockRecorder struct {
	mock *MockConfigRepo
}

// NewMockConfigRepo creates a new mock instance.
func NewMockConfigRepo(ctrl *gomock.Controller) *MockConfigRepo {
	mock := &MockConfigRepo{ctrl: ctrl}
	mock.recorder = &MockConfigRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRepo) EXPECT() *MockConfigRepoMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigRepo) GetConfig() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigRepoMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigRepo)(nil).GetConfig))
}

// GetMiddlewares mocks base method.
func (m *MockConfigRepo) GetMiddlewares() []domain.Middleware {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMiddlewares")
	ret0, _ := ret[0].([]domain.Middleware)
	return ret0
}

// GetMiddlewares indicates an expected call of GetMiddlewares.
func (mr *MockConfigRepoMockRecorder) GetMiddlewares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMiddlewares", reflect.TypeOf((*MockConfigRepo)(nil).GetMiddlewares))
}

// MockConfigStage is a mock of ConfigStage interface.
type MockConfigStage struct {
	ctrl     *gomock.Controller
	recorder *MockConfigStageMockRecorder
}

// MockConfigStageMockRecorder is the mock recorder for MockConfigStage.
type MockConfigStageMockRecorder struct {
	mock *MockConfigStage
}

// NewMockConfigStage creates a new mock instance.
func NewMockConfigStage(ctrl *gomock.Controller) *MockConfigStage {
	mock := &MockConfigStage{ctrl: ctrl}
	mock.recorder = &MockConfigStageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigStage) EXPECT() *MockConfigStageMockRecorder {
	return m.recorder
}

// Remote mocks base method.
func (m *MockConfigStage) Remote() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(string)
	return ret0
}

// Remote indicates an expected call of Remote.
func (mr *MockConfigStageMockRecorder) Remote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockConfigStage)(nil).Remote))
}

// Type mocks base method.
func (m *MockConfigStage) Type() config.ConfigType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(config.ConfigType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockConfigStageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockConfigStage)(nil).Type))
}
