// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/snapshot.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/snapshot.go -destination=internal/domain/mocks/snapshot.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/backup-blob/zfs-backup-blob/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSnapshotRepository is a mock of SnapshotRepository interface.
type MockSnapshotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotRepositoryMockRecorder
}

// MockSnapshotRepositoryMockRecorder is the mock recorder for MockSnapshotRepository.
type MockSnapshotRepositoryMockRecorder struct {
	mock *MockSnapshotRepository
}

// NewMockSnapshotRepository creates a new mock instance.
func NewMockSnapshotRepository(ctrl *gomock.Controller) *MockSnapshotRepository {
	mock := &MockSnapshotRepository{ctrl: ctrl}
	mock.recorder = &MockSnapshotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotRepository) EXPECT() *MockSnapshotRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSnapshotRepository) Create(v *domain.ZfsVolume) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", v)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSnapshotRepositoryMockRecorder) Create(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSnapshotRepository)(nil).Create), v)
}

// CreateWithType mocks base method.
func (m *MockSnapshotRepository) CreateWithType(v *domain.ZfsVolume, t domain.BackupType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithType", v, t)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithType indicates an expected call of CreateWithType.
func (mr *MockSnapshotRepositoryMockRecorder) CreateWithType(v, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithType", reflect.TypeOf((*MockSnapshotRepository)(nil).CreateWithType), v, t)
}

// Delete mocks base method.
func (m *MockSnapshotRepository) Delete(snap *domain.ZfsSnapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", snap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSnapshotRepositoryMockRecorder) Delete(snap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSnapshotRepository)(nil).Delete), snap)
}

// GetType mocks base method.
func (m *MockSnapshotRepository) GetType(zfsEntity string) (domain.BackupType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType", zfsEntity)
	ret0, _ := ret[0].(domain.BackupType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetType indicates an expected call of GetType.
func (mr *MockSnapshotRepositoryMockRecorder) GetType(zfsEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockSnapshotRepository)(nil).GetType), zfsEntity)
}

// List mocks base method.
func (m *MockSnapshotRepository) List() ([]*domain.ZfsSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*domain.ZfsSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSnapshotRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSnapshotRepository)(nil).List))
}

// ListFilter mocks base method.
func (m *MockSnapshotRepository) ListFilter(filter *domain.FilterCriteria) ([]*domain.ZfsSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilter", filter)
	ret0, _ := ret[0].([]*domain.ZfsSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilter indicates an expected call of ListFilter.
func (mr *MockSnapshotRepositoryMockRecorder) ListFilter(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilter", reflect.TypeOf((*MockSnapshotRepository)(nil).ListFilter), filter)
}

// MockSnapshotUsecase is a mock of SnapshotUsecase interface.
type MockSnapshotUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotUsecaseMockRecorder
}

// MockSnapshotUsecaseMockRecorder is the mock recorder for MockSnapshotUsecase.
type MockSnapshotUsecaseMockRecorder struct {
	mock *MockSnapshotUsecase
}

// NewMockSnapshotUsecase creates a new mock instance.
func NewMockSnapshotUsecase(ctrl *gomock.Controller) *MockSnapshotUsecase {
	mock := &MockSnapshotUsecase{ctrl: ctrl}
	mock.recorder = &MockSnapshotUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotUsecase) EXPECT() *MockSnapshotUsecaseMockRecorder {
	return m.recorder
}

// CreateByGroup mocks base method.
func (m *MockSnapshotUsecase) CreateByGroup(groupName, backupType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByGroup", groupName, backupType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateByGroup indicates an expected call of CreateByGroup.
func (mr *MockSnapshotUsecaseMockRecorder) CreateByGroup(groupName, backupType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByGroup", reflect.TypeOf((*MockSnapshotUsecase)(nil).CreateByGroup), groupName, backupType)
}

// CreateByVolume mocks base method.
func (m *MockSnapshotUsecase) CreateByVolume(volume *domain.ZfsVolume, backupType domain.BackupType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByVolume", volume, backupType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateByVolume indicates an expected call of CreateByVolume.
func (mr *MockSnapshotUsecaseMockRecorder) CreateByVolume(volume, backupType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByVolume", reflect.TypeOf((*MockSnapshotUsecase)(nil).CreateByVolume), volume, backupType)
}

// MockSnapshotNamestrategy is a mock of SnapshotNamestrategy interface.
type MockSnapshotNamestrategy struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotNamestrategyMockRecorder
}

// MockSnapshotNamestrategyMockRecorder is the mock recorder for MockSnapshotNamestrategy.
type MockSnapshotNamestrategyMockRecorder struct {
	mock *MockSnapshotNamestrategy
}

// NewMockSnapshotNamestrategy creates a new mock instance.
func NewMockSnapshotNamestrategy(ctrl *gomock.Controller) *MockSnapshotNamestrategy {
	mock := &MockSnapshotNamestrategy{ctrl: ctrl}
	mock.recorder = &MockSnapshotNamestrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotNamestrategy) EXPECT() *MockSnapshotNamestrategyMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockSnapshotNamestrategy) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockSnapshotNamestrategyMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockSnapshotNamestrategy)(nil).GetName))
}

// IsGreater mocks base method.
func (m *MockSnapshotNamestrategy) IsGreater(snapNameA, snapNameB string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGreater", snapNameA, snapNameB)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGreater indicates an expected call of IsGreater.
func (mr *MockSnapshotNamestrategyMockRecorder) IsGreater(snapNameA, snapNameB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGreater", reflect.TypeOf((*MockSnapshotNamestrategy)(nil).IsGreater), snapNameA, snapNameB)
}

// IsMatching mocks base method.
func (m *MockSnapshotNamestrategy) IsMatching(snapshotName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMatching", snapshotName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMatching indicates an expected call of IsMatching.
func (mr *MockSnapshotNamestrategyMockRecorder) IsMatching(snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMatching", reflect.TypeOf((*MockSnapshotNamestrategy)(nil).IsMatching), snapshotName)
}
