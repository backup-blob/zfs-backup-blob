// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/volume.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/volume.go -destination=internal/domain/mocks/volume.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	domain "github.com/backup-blob/zfs-backup-blob/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockVolumeRepository is a mock of VolumeRepository interface.
type MockVolumeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeRepositoryMockRecorder
}

// MockVolumeRepositoryMockRecorder is the mock recorder for MockVolumeRepository.
type MockVolumeRepositoryMockRecorder struct {
	mock *MockVolumeRepository
}

// NewMockVolumeRepository creates a new mock instance.
func NewMockVolumeRepository(ctrl *gomock.Controller) *MockVolumeRepository {
	mock := &MockVolumeRepository{ctrl: ctrl}
	mock.recorder = &MockVolumeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeRepository) EXPECT() *MockVolumeRepositoryMockRecorder {
	return m.recorder
}

// ListVolumes mocks base method.
func (m *MockVolumeRepository) ListVolumes() ([]*domain.ZfsVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes")
	ret0, _ := ret[0].([]*domain.ZfsVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockVolumeRepositoryMockRecorder) ListVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockVolumeRepository)(nil).ListVolumes))
}

// ListVolumesByGroup mocks base method.
func (m *MockVolumeRepository) ListVolumesByGroup(groupName string) ([]*domain.ZfsVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumesByGroup", groupName)
	ret0, _ := ret[0].([]*domain.ZfsVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumesByGroup indicates an expected call of ListVolumesByGroup.
func (mr *MockVolumeRepositoryMockRecorder) ListVolumesByGroup(groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumesByGroup", reflect.TypeOf((*MockVolumeRepository)(nil).ListVolumesByGroup), groupName)
}

// TagVolumeWithGroup mocks base method.
func (m *MockVolumeRepository) TagVolumeWithGroup(volume *domain.ZfsVolume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagVolumeWithGroup", volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagVolumeWithGroup indicates an expected call of TagVolumeWithGroup.
func (mr *MockVolumeRepositoryMockRecorder) TagVolumeWithGroup(volume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagVolumeWithGroup", reflect.TypeOf((*MockVolumeRepository)(nil).TagVolumeWithGroup), volume)
}

// MockVolumeUsecase is a mock of VolumeUsecase interface.
type MockVolumeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeUsecaseMockRecorder
}

// MockVolumeUsecaseMockRecorder is the mock recorder for MockVolumeUsecase.
type MockVolumeUsecaseMockRecorder struct {
	mock *MockVolumeUsecase
}

// NewMockVolumeUsecase creates a new mock instance.
func NewMockVolumeUsecase(ctrl *gomock.Controller) *MockVolumeUsecase {
	mock := &MockVolumeUsecase{ctrl: ctrl}
	mock.recorder = &MockVolumeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeUsecase) EXPECT() *MockVolumeUsecaseMockRecorder {
	return m.recorder
}

// AddToGroup mocks base method.
func (m *MockVolumeUsecase) AddToGroup(volumeName, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToGroup", volumeName, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToGroup indicates an expected call of AddToGroup.
func (mr *MockVolumeUsecaseMockRecorder) AddToGroup(volumeName, groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToGroup", reflect.TypeOf((*MockVolumeUsecase)(nil).AddToGroup), volumeName, groupName)
}

// List mocks base method.
func (m *MockVolumeUsecase) List(writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockVolumeUsecaseMockRecorder) List(writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVolumeUsecase)(nil).List), writer)
}
