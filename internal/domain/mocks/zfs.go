// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/zfs.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/zfs.go -destination=internal/domain/mocks/zfs.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	exec "os/exec"
	reflect "reflect"

	domain "github.com/backup-blob/zfs-backup-blob/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockZfsDriver is a mock of ZfsDriver interface.
type MockZfsDriver struct {
	ctrl     *gomock.Controller
	recorder *MockZfsDriverMockRecorder
}

// MockZfsDriverMockRecorder is the mock recorder for MockZfsDriver.
type MockZfsDriverMockRecorder struct {
	mock *MockZfsDriver
}

// NewMockZfsDriver creates a new mock instance.
func NewMockZfsDriver(ctrl *gomock.Controller) *MockZfsDriver {
	mock := &MockZfsDriver{ctrl: ctrl}
	mock.recorder = &MockZfsDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZfsDriver) EXPECT() *MockZfsDriverMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockZfsDriver) Destroy(zfsEntity string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", zfsEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockZfsDriverMockRecorder) Destroy(zfsEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockZfsDriver)(nil).Destroy), zfsEntity)
}

// GetField mocks base method.
func (m *MockZfsDriver) GetField(fieldName, zfsEntity string) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetField", fieldName, zfsEntity)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// GetField indicates an expected call of GetField.
func (mr *MockZfsDriverMockRecorder) GetField(fieldName, zfsEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetField", reflect.TypeOf((*MockZfsDriver)(nil).GetField), fieldName, zfsEntity)
}

// List mocks base method.
func (m *MockZfsDriver) List(p *domain.ListParameters) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", p)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockZfsDriverMockRecorder) List(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockZfsDriver)(nil).List), p)
}

// Receive mocks base method.
func (m *MockZfsDriver) Receive(p *domain.ReceiveParameters) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", p)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockZfsDriverMockRecorder) Receive(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockZfsDriver)(nil).Receive), p)
}

// Send mocks base method.
func (m *MockZfsDriver) Send(p *domain.SendParameters) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", p)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockZfsDriverMockRecorder) Send(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockZfsDriver)(nil).Send), p)
}

// SetField mocks base method.
func (m *MockZfsDriver) SetField(fieldName, value, zfsEntity string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetField", fieldName, value, zfsEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetField indicates an expected call of SetField.
func (mr *MockZfsDriverMockRecorder) SetField(fieldName, value, zfsEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetField", reflect.TypeOf((*MockZfsDriver)(nil).SetField), fieldName, value, zfsEntity)
}

// Snapshot mocks base method.
func (m *MockZfsDriver) Snapshot(name string) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", name)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockZfsDriverMockRecorder) Snapshot(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockZfsDriver)(nil).Snapshot), name)
}
